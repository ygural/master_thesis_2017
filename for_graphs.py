import numpy as np
from matplotlib import pyplot as plt
from gl_vars import *
import matplotlib.pyplot as plt
from matplotlib.legend_handler import HandlerLine2D

'''
x = np.array([0,0,0,0,0,
              1,0,2,0,2,
              1,0,2,3,2,
              1,2,3,4,5,
              4,4,2,0,1,
              2,1,3,1,0,
              2,0,2,1,0,
              0,1,0,0,0],
            [0,0,0,0,0,

              1,0,2,0,2,
              1,0,2,3,2,
              2,4,2,4,4,

              4,4,2,0,1,
              1,2,4,1,1,


              0,0,0,1,0,
              0,1,0,0,0])

plt.hist2d(x, y, bins=100)
plt.colorbar()
plt.title('Heatmap without smoothing')
plt.xlabel("X")
plt.ylabel("Y")
print(y)
plt.show()
'''
# --------  final graph
# num = np.array([3,4,5])
# plt.xlim([3,5])
# data1 = np.array([0.29, 0.089, 0.0916])
# data2 = np.array([27, 76, 49*60])
# plt.figure(1)
# plt.grid(True)
# plt.xticks(num)
# plt.xlabel('Количество точек доступа, шт')
# plt.ylabel('Погрешность позиционирования, м')
# plt.plot(num, data1)
#
# plt.figure(2)
# plt.grid(True)
# plt.yscale('log')
# plt.xticks(num)
# plt.xlabel('Количество точек доступа, шт')
# plt.ylabel('Вычислительные затраты, сек')
# plt.plot(num, data2)
# plt.show()
# -----------------------

# # ----влияние помехи
# RSSI = np.arange(100, 125, 1)
# dist = np.arange(10*LAMBDA, np.sqrt(30*30 + 20*20), 1)
# true_d = np.power(10, ((RSSI - 20 * np.log10(FREQ) + 127.55) / 20))
# wrong_d = np.power(10, ((-5 + RSSI - 20 * np.log10(FREQ) + 127.55) / 20))
# #dx = true_d - wrong_d
# dx = dist - np.power(10, ((-5+20 * np.log10(dist)) / 20))
# s = np.array([10*LAMBDA,0.5*np.sqrt(30*30 + 20*20),30])
# xd = s - np.power(10, ((-5+20 * np.log10(s)) / 20))
# plt.xlabel('Расстояние между передатчиком и приемником, м')
# plt.ylabel('Смещение оценки расстояния, м')
# plt.plot(dist, dx)
# plt.grid()
# plt.show()
# #print(1- np.power(10, (-5/20)))
# for i in range(dx.shape[0]-1):
#     print(dx[i+1]-dx[i])
# # -----------------------

#convert([52.12589461220729, 34.523194982311004, 63.71215370881275, 39.289199858682267, 51.029289327983079, 60.147259957720735, 56.080758940337489, 51.679127104857926, 71.477438766940637, 69.748364024947264, 91.195731735828019, 91.317694884279987, 99.949587590369873, 114.74584823150732, 99.027817046124795, 62.164104960725808, 97.51540772920805, 53.486428084822549, 97.517530458923005, 97.511069714803781, 103.77620192908653, 102.54909691956546, 113.06870748542508, 112.10800243346914, 105.92068046794932, 119.27044668246972, 110.01038560055774, 90.717169708034277, 124.39431459412626, 101.0360379524721, 116.04170295852278, 101.15853654591994, 103.60661909843918, 122.07435378869869, 110.52599723901319, 143.15220783528156, 133.15323413890897, 86.077472044033769, 114.9118299522481, 89.498951350614306, 96.350596422877388, 105.59938366220065, 79.649247495439312, 98.64188407426262, 115.38700002384891, 129.80531805667266, 81.828974771763455, 113.49813553056097, 98.864096850354116, 94.293250974226268, 93.281985598691449, 70.413387277415893, 52.973273885460813, 75.554050071113494, 42.098038553377826, 27.098340475196743, 67.409616555276386, 51.479223903870817])
#deque([6.2623512323828141, 4.2389650682403328, 7.6984117785178876, 4.9079609808875331, 4.4869910410118363, 3.977960200009699, 2.9569735271029982, 5.4719405030417017, 5.3219630592939122, 5.0960060606244229, 4.6181448776440162, 5.8954919318426535, 6.9524230702260716, 5.8051089175175106, 6.8674827005482806, 4.4136442128390101, 2.4212456640837527, 5.0520796680224915, 4.2548396105295909, 5.0838604588735938, 3.7936568680147853, 5.6169501203601619, 4.4991204174313655, 2.8697507194121763, 4.267369910185896, 3.4847180817301333, 6.6818683369847118, 6.0439093572045328, 3.8145598267425624, 5.2287275910796849, 5.3104303343068562, 8.6964238480260612, 5.0607767975339399, 6.0180233624464927, 7.7094506983604383, 7.8094706950800861, 8.2267235036924333, 5.8208721799586796, 6.1998499087952155, 5.7131566037307469, 8.0266577617650476, 6.8145791196887293, 5.0889818037073145, 6.2317096643073082, 6.9182502557606869, 4.3930994293311798, 7.7119915389543019, 5.6886838743867463, 4.9484354566808957, 4.5431780473835666, 5.6037599069196506, 4.3256591483672597, 4.225538525687015, 9.3261088872527651, 3.8533106506482588, 2.1839600395982401, 10.47355357027798, 7.5506147786884625])

# -- fresnel zone ---#
# dd1=np.arange(10*LAMBDA, 18.02-10*LAMBDA, 1)
# dd2=18.02-5*LAMBDA-dd1
# xx = np.sqrt(10**2+15**2)
# #ff=0.5*np.sqrt(LAMBDA*xx)
# ff=np.sqrt((LAMBDA*dd1*dd2)/(dd1+dd2))
# plt.plot(dd1, ff)
# plt.xlabel('Расстояние между излучателем и приемником, м')
# plt.ylabel('Радиус первой зоны Френеля, м')
# plt.grid()
# plt.show()
# ----- ------#
time = np.array([40, 75,115])

tril = np.array([[4.49 , 0.62],
                [4.59 ,0.43],
                [5.26 ,0.47]])
corr = np.array([[3.09 , 0.44],[3.53 ,0.29], [ 3.36 ,0.41]])
alg = np.array([[4.61,  0.35],[3.93 ,0.27],[ 3.2 ,0.31]])



plt.grid()
#line1, = plt.plot(time, tril[:,0],'r', label="Этап 1: метод трилатерации")
line1 = plt.errorbar(time, tril[:,0], yerr=tril[:,1], fmt='-o', label="Этап 1: метод трилатерации")
#line2, = plt.plot(time, corr[:,0] ,'b',label="Этап 2: алгоритм с коррекцией")
plt.errorbar(time, corr[:,0] ,yerr=corr[:,1], fmt='-o')
#line3, = plt.plot(time, alg[:,0],'g',label="Этап 3: с учетом найденных преград")
plt.errorbar(time, alg[:,0] ,yerr=alg[:,1], fmt='-o')
plt.xlabel('Время, сек')
plt.ylabel('Точность позиционирования, м')

plt.legend(handles=[line1])
#plt.legend(handler_map={line1: HandlerLine2D(numpoints=1), line2: HandlerLine2D(numpoints=1), line3: HandlerLine2D(numpoints=1)})
plt.show()